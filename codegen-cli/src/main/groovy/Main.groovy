import groovy.json.JsonSlurper

import java.time.ZonedDateTime

class Main implements Runnable {

    URL inputSpec
    File outputDir
    String packageName

    static void main(String[] args) {
        new Main(inputSpec: new URL(args[0]), outputDir: new File(args[1]), packageName: 'no.maddin.api').run()
    }

    void run() {

        def swagger = new JsonSlurper().parse(inputSpec)
        if (swagger?.swagger != '2.0') {
            throw new IllegalArgumentException('Can only read swagger 2.0 files')
        }
        swagger.typeRegistry = [:]
        swagger.typeRegistry = [:]
        swagger.typeRegistry << [
                string: 'String',
                date: 'ZonedDateTime',
                'date-time': 'ZonedDataTime',
                '#/definitions/Any': 'Object',
                'boolean': 'Boolean'
        ]

        swagger.resolveType = {model, propDetails ->
            if (propDetails?.type) {
                if (propDetails.type == 'array') {
                    model.imports << 'java.util.List'
                    return "List<${swagger.resolveType(model, propDetails.items)}>"
                } else {
                    return swagger.typeRegistry[propDetails.type]
                }
            } else if (propDetails?.$ref) {
                def refType = swagger.typeRegistry[propDetails.$ref]
                if (!refType) {
                    refType = (propDetails.$ref =~ /#\/definitions\/(.+)/)[ 0 ][ 1 ]
                    swagger.typeRegistry[propDetails.$ref] = refType
                }
                return refType
            } else {
                return 'Object'
            }
        }
        writeModels(swagger)
    }

    void writeModels(Map swagger) {
        writeModel(swagger) { name, model ->
            (model.filename as File).parentFile.mkdirs()
            model.filename.withPrintWriter { modelFile ->

                modelFile.println "/* Generated by no.maddin:openapi-codegen: ${ZonedDateTime.now()} */"
                modelFile.println "package ${model.package};\n"

                model?.imports?.each {
                    modelFile.println "import ${it};"
                }
                modelFile.println()

                if (model?.classType == 'class') {
                    modelFile.println("@lombok.Data")
                    modelFile.println "@ApiModel(description = \"${model?.description}\")"
                    modelFile.println "public class ${name} {"
                    model?.properties?.each { propName, propDetail ->
                        modelFile.println "    private ${propDetail?.propType} ${propDetail.propName};"
                    }
                } else if (model?.classType == 'enum') {
                    modelFile.println("/**\n * ${model?.description}\n */")
                    modelFile.println("public enum ${name} {")
                    modelFile.println(model?.enum?.join(', '))

                } else {
                    throw new IllegalArgumentException("Unknown class type ${model?.classType}")
                }
                modelFile.println "}"
            }
        }
    }

    def writeModel(Map swagger, Closure<Map> eachModel) {

        def packagePath = new File(outputDir, packageName.replace('.' as char, File.separatorChar))
        swagger.definitions.each { name, model ->

            model.package = packageName
            model.description = model?.description?.replace('\n', '\\n')

            // should the model be skipped? e.g. if it doesn't have any properties

            model.imports = [
                    'io.swagger.annotations.ApiModel',
                    'io.swagger.annotations.ApiModelProperty'
            ].toSet()

            if (model?.type == 'object') {
                model.classType = 'class'
                if (!model?.properties) {
                    model.skip = true
                } else {
                    // process properties
                    model?.properties?.each { propName, propDetails ->
                        propDetails.propType = swagger.resolveType(model, propDetails)

                        propDetails.propName = propName.replace('@', 'at')
                    }
                }
            } else if (model?.type == 'string' && model?.enum) {
                model.classType = 'enum'
                if (model.enum.isEmpty()) {
                    model.skip = true
                }

            } else {
                model.skip = true
            }

            if (!model.skip) {

                // create File name for model
                model.filename = new File(packagePath, "${name}.java")
                eachModel(name, model)
            }
        }
    }
}
